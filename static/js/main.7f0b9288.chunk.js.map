{"version":3,"sources":["D3Chart.js","ChartWrapper.jsx","GenderDropdown.jsx","App.js","serviceWorker.js","index.js"],"names":["MARGIN","WIDTH","HEIGHT","D3Chart","element","vis","this","svg","d3","append","attr","g","title","text","xAxisGroup","yAxisGroup","Promise","all","then","dataSets","menData","womenData","update","gender","data","x","domain","map","d","name","range","paddingInner","paddingOuter","y","height","xAxiscall","transition","duration","call","yAxiscall","rect","selectAll","exit","remove","bandwidth","enter","ChartWrapper","setState","chart","refs","nextProps","state","ref","Component","GenderDropdown","handleSelect","Dropdown","Toggle","variant","id","Menu","Item","onClick","App","props","genderSelected","evt","target","split","toLowerCase","className","Navbar","expand","bg","Container","Brand","href","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f0b9288.chunk.js","sourcesContent":["import * as d3 from 'd3';\nconst MARGIN = { TOP: 0, RIGHT: 10, BOTTOM: 50, LEFT: 50 };\nconst WIDTH = 800 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 600 - MARGIN.TOP - MARGIN.BOTTOM;\n\nexport class D3Chart {\n    constructor(element) {\n        const vis = this;\n        vis.svg = d3\n            .select(element)\n            .append('svg')\n            .attr('width', WIDTH + MARGIN.RIGHT + MARGIN.LEFT)\n            .attr('height', HEIGHT + MARGIN.TOP + MARGIN.BOTTOM);\n\n        vis.g = vis.svg\n            .append('g')\n            .attr('transform', `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n            .attr('width', WIDTH)\n            .attr('height', HEIGHT);\n\n        // TITLES\n        vis.title = vis.g\n            .append('text')\n            .attr('x', WIDTH / 2)\n            .attr('y', HEIGHT + 40)\n            .attr('text-anchor', 'middle')\n            .text(\"The World's Tallest Men\");\n\n        // TITLES\n        vis.svg\n            .append('text')\n            .attr('x', -HEIGHT / 2)\n            .attr('y', 15)\n            .attr('text-anchor', 'middle')\n            .text('Height in cm')\n            .attr('transform', `rotate(-90)`);\n\n        // Axis Groups\n        vis.xAxisGroup = vis.g.append('g').attr('transform', `translate(0, ${HEIGHT})`);\n        vis.yAxisGroup = vis.g.append('g');\n\n        Promise.all([\n            d3.json('https://udemy-react-d3.firebaseio.com/tallest_men.json'),\n            d3.json('https://udemy-react-d3.firebaseio.com/tallest_women.json')\n        ]).then(dataSets => {\n            vis.menData = dataSets[0];\n            vis.womenData = dataSets[1];\n\n            vis.update('men');\n        });\n    }\n\n    update(gender) {\n        const vis = this;\n        if (gender === 'men') {\n            vis.data = vis.menData;\n            vis.title.text(\"The World's Tallest Men\");\n        } else {\n            vis.data = vis.womenData;\n            vis.title.text(\"The World's Tallest Women\");\n        }\n\n        // SCALES\n        const x = d3\n            .scaleBand()\n            .domain(vis.data.map(d => d.name))\n            .range([0, WIDTH])\n            .paddingInner(0.1)\n            .paddingOuter(0.2);\n\n        const y = d3\n            .scaleLinear()\n            .domain([0, d3.max(vis.data, d => d.height)])\n            .range([HEIGHT, 0]);\n\n        // AXIS\n        const xAxiscall = d3.axisBottom(x);\n        vis.xAxisGroup\n            .transition()\n            .duration(500)\n            .call(xAxiscall);\n\n        const yAxiscall = d3.axisLeft(y);\n        vis.yAxisGroup\n            .transition()\n            .duration(500)\n            .call(yAxiscall);\n\n        // ADD BARS\n        // Join\n        const rect = vis.g.selectAll('rect').data(vis.data);\n\n        //Exit\n        rect.exit()\n            .transition()\n            .duration(500)\n            .attr('height', 0)\n            .attr('y', HEIGHT)\n            .remove();\n\n        // Update\n        rect.transition()\n            .duration(500)\n            .attr('x', d => x(d.name))\n            .attr('y', d => y(d.height))\n            .attr('width', x.bandwidth)\n            .attr('height', d => HEIGHT - y(d.height))\n            .attr('fill', 'grey');\n\n        // Enter\n        rect.enter()\n            .append('rect')\n            .attr('x', d => x(d.name))\n            .attr('width', x.bandwidth)\n            .attr('fill', 'grey')\n            .attr('y', HEIGHT)\n            .transition()\n            .duration(500)\n            .attr('height', d => HEIGHT - y(d.height))\n            .attr('y', d => y(d.height));\n    }\n}\n\nexport default D3Chart;\n","import React, { Component } from 'react';\nimport D3Chart from './D3Chart';\n\nexport class ChartWrapper extends Component {\n    componentDidMount() {\n        this.setState({ chart: new D3Chart(this.refs.chart) });\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    componentWillReceiveProps(nextProps) {\n        this.state.chart.update(nextProps.gender);\n    }\n    render() {\n        return <div ref='chart'></div>;\n    }\n}\n\nexport default ChartWrapper;\n","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default function GenderDropdown({ handleSelect }) {\n    return (\n        <Dropdown>\n            <Dropdown.Toggle variant='primary' id='dropdown-basic'>\n                Select\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n                <Dropdown.Item onClick={handleSelect}>Tallest Men</Dropdown.Item>\n                <Dropdown.Item onClick={handleSelect}>Tallest Women</Dropdown.Item>\n            </Dropdown.Menu>\n        </Dropdown>\n    );\n}\n","import React, { Component } from 'react';\nimport ChartWrapper from './ChartWrapper.jsx';\nimport GenderDropdown from './GenderDropdown';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Container } from 'react-bootstrap';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './index.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gender: 'men'\n        };\n    }\n\n    genderSelected = evt => {\n        const gender = evt.target.text.split(' ')[1].toLowerCase();\n        this.setState({ gender });\n    };\n    render() {\n        return (\n            <div className='App'>\n                <Navbar expand='lg' variant='light' bg='light'>\n                    <Container>\n                        <Navbar.Brand href='#'>Barchartly</Navbar.Brand>\n                    </Container>\n                </Navbar>\n                <Container>\n                    <Row>\n                        <Col xs={12}>\n                            <GenderDropdown handleSelect={this.genderSelected} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <ChartWrapper gender={this.state.gender} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}